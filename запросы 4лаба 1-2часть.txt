use circus
go
--------создание временных таблиц
DECLARE @Driver TABLE (id INT, name varchar(255))
insert into @Driver (id,name) values (1,'Петр Петров')
insert into @Driver (id,name) values (2,'Кирилл Иванов')
INSERT INTO @Driver(id, name) VALUES (3,'Марк Иванов') 
SELECT * FROM @Driver

----- добавили таблицу в бд
CREATE TABLE #ProductSummary
(ProdId INT IDENTITY,
ProdName NVARCHAR(20),
Price MONEY)
 
INSERT INTO #ProductSummary
VALUES ('Asus 17', 18000),
        ('ZenBook 12', 56000)
 
SELECT * FROM #ProductSummary


use circus
go
DECLARE @Представление TABLE(id INT, название VARCHAR (255) )
INSERT @Представление SELECT Id_представления, Название FROM Представление
SELECT * FROM @Представление

-----------------------------IF
use circus
go
DECLARE @volume_name INT 
DECLARE @name VARCHAR(255)
SET @volume_name = (SELECT COUNT(*) FROM Представление) 
IF @volume_name >10
BEGIN
SET @name = 'Количество представлений больше 10'
SELECT @name
END ELSE BEGIN
SET @name = 'Количество представлений = ' + str(@volume_name)
SELECT @name
END

use circus
go
DECLARE @count INT
DECLARE @name_rab VARCHAR(255)
SET @count =(SELECT COUNT(*) FROM [Работники цирка])
IF @count >5
BEGIN
SET  @name_rab='Количество работников больше 5, а именно ='  + str(@count)
SELECT  @name_rab
END ELSE BEGIN
SET  @name_rab ='Количество работников =' + str(@count) 
SELECT  @name_rab
END
 ---------------------------------------------------------------WHILE
 use circus
go
 DECLARE @a INT SET @a = 1 WHILE @a <50
BEGIN
PRINT @a 
iF (@a>30) AND (@a<40)
BREAK --выход и выполнение 1-й команды за циклом
ELSE
SET @a = @a+rand()*10 
CONTINUE
END
 PRINT @a


 use circus
go
 DECLARE @b INT SET @b = 1 WHILE @b <60
BEGIN
PRINT @b
iF (@b>35) AND (@b<40)
BREAK --выход и выполнение 1-й команды за циклом
ELSE
SET @b = @b+rand()*10 
CONTINUE
END
 PRINT @b

 ---------------------скалярная функция
use circus
go
IF OBJECT_ID (N'dbo.ISOweek', N'FN') IS NOT NULL 
DROP FUNCTION dbo.ISOweek;

go
CREATE FUNCTION dbo.ISOweek (@DATE date) RETURNS CHAR(15)
WITH EXECUTE AS CALLER AS
BEGIN
DECLARE @man int; 
DECLARE @ISOweek char(15); 
SET @man= DAY(@DATE)

IF (@man=1) SET @ISOweek='Январь'; 
IF (@man=2) SET @ISOweek='Февраль';
IF (@man=3) SET @ISOweek='Март';
IF (@man=4) SET @ISOweek='Апрель'; 
IF (@man=5) SET @ISOweek='Май';
IF (@man=6) SET @ISOweek='Июнь'; 
IF (@man=7) SET @ISOweek='Июль';
IF (@man=8) SET @ISOweek='Август';
IF (@man=9) SET @ISOweek='Сентябрь'; 
IF (@man=10) SET @ISOweek='Октябрь'; 
IF (@man=11) SET @ISOweek='Ноябрь';
IF (@man=12) SET @ISOweek='Декабрь';

RETURN(@ISOweek); 
END;
GO
SET DATEFIRST 1;
SELECT dbo.ISOweek('12.2.2004') AS 'Месяц';




-------------возвращение таблицы
use circus
go

IF OBJECT_ID (N'PriceMoreThan', N'IF') IS NOT NULL 
DROP FUNCTION dbo.PriceMoreThan;

go
CREATE FUNCTION dbo.PriceMoreThan(@pr money) RETURNS TABLE
 
AS RETURN  
    SELECT [Цена билета] 
    FROM [Программа цирка]  
    WHERE [Цена билета] > @pr

go

select * from dbo.PriceMoreThan(380)
go


use circus
go
IF OBJECT_ID (N'Full_price', N'IF') IS NOT NULL 
DROP FUNCTION dbo.Full_price;

go
CREATE FUNCTION dbo.Full_price (@price int) RETURNS TABLE
AS RETURN 
SELECT [Представление].Название AS "Название", [Программа цирка].[Цена билета] AS "Цена"
from [Представление],[Программа цирка]
WHERE Представление.Id_представления=[Программа цирка].Id_представления_прог and [Программа цирка].[Цена билета]>@price
GROUP BY Название,[Цена билета]

go
select * from dbo.Full_price (380)
go

----------------------------------------------процедура без параметров
use circus
go

CREATE PROCEDURE Count_type_of_move 
AS
Select count(Тип) from Представление
where Тип='шоу' 
Go
execute Count_type_of_move

DROP PROCEDURE Count_type_of_move


go
create procedure Count_show
 as 
 select count ([Период проведения]) from [Программа цирка]
 where [Период проведения]= 4
 go

 execute Count_show

 DROP PROCEDURE Count_show
----------------------------------------------процедура с параметрами
go
CREATE PROCEDURE Count_Show @type as varchar(20)
AS
Select count(Название) from Представление
WHERE [Режиссер-постановщик]='Суприк' and Тип=@type
Go

exec Count_Show выступление
go
 DROP PROCEDURE Count_Show



-------------------------------------процедура с return
go
CREATE PROCEDURE check_type_of_show @param int AS
IF (SELECT Тип FROM Представление WHERE Id_представления = @param)
= 'шоу'
RETURN 1 ELSE RETURN 2

go
DECLARE @return_status int
EXECUTE @return_status = check_type_of_show 3 SELECT 'Return Status' = @return_status 

go
 DROP PROCEDURE check_type_of_show


---------------------------------------------------------update процедура
go
CREATE PROCEDURE update_Type AS
UPDATE Представление SET Тип = 'Тусэ'
go
exec update_Type
go
 DROP PROCEDURE update_Type



--------------------процедура select 
go
CREATE PROCEDURE select_Show @h VARCHAR(255) AS
SELECT * FROM Представление WHERE Жанр=@h
go
EXEC select_Show @h='14+'

go
 DROP PROCEDURE select_Show


 -------------2 ЧАСТЬ-------------------------------------

 use circus
-------------------------
go
CREATE FUNCTION Calculator (@Opd1 bigint,
@Opd2 bigint,
@Oprt char(1) = '*') RETURNS bigint
AS BEGIN
DECLARE @Result bigint SET @Result =
CASE @Oprt
WHEN '+' THEN @Opd1 + @Opd2 WHEN '-' THEN @Opd1 - @Opd2
WHEN '*' THEN @Opd1 * @Opd2 WHEN '/' THEN @Opd1 / @Opd2 ELSE 0
END

Return @Result END
go


SELECT dbo.Calculator(4,5,'+' ),
dbo.Calculator(15,2, '*') -dbo.Calculator(8,4,'/')
go
 DROP FUNCTION dbo.Calculator
---------------------------------------------
go
CREATE FUNCTION DYNTAB (@Genre varchar(255)) 
RETURNS Table AS

RETURN SELECT Id_представления,Название,Жанр FROM Представление WHERE Жанр = @Genre
go
SELECT * FROM DYNTAB ('14+')
go
 DROP FUNCTION DYNTAB
 
-------------------------------------------
go
CREATE FUNCTION Parse (@String varchar (255))
RETURNS @tabl TABLE
(Number int IDENTITY (1,1) NOT NULL,
Substr varchar (30)) AS
BEGIN
DECLARE @Str1 varchar (500), @Pos int SET @Str1 = @String
WHILE 1>0 BEGIN
SET @Pos = CHARINDEX('', @Str1) IF @POS>0
BEGIN
INSERT INTO @tabl
VALUES (SUBSTRING (@Str1,1,@Pos)) END
ELSE BEGIN
INSERT INTO @tabl VALUES (@Str1) BREAK
END END RETURN END

go
DECLARE @TestString varchar (255)
Set @TestString = 'SQL Server 2019' SELECT * FROM Parse (@TestString)

go
 DROP FUNCTION Parse

